#!/usr/bin/env python
#
# PACS push plugin for ChRIS reloaded
#
#                                            _     
#                                           | |    
# ____  _____  ____  ___    ____  _   _  ___| |__  
#|  _ \(____ |/ ___)/___)  |  _ \| | | |/___)  _ \ 
#| |_| / ___ ( (___|___ |  | |_| | |_| |___ | | | |
#|  __/\_____|\____|___/   |  __/|____/(___/|_| |_|
#|_|                       |_|                     
#
# (c) 2012 Fetal-Neonatal Neuroimaging & Developmental Science Center
#                   Boston Children's Hospital
#
#              http://childrenshospital.org/FNNDSC/
#                        dev@babyMRI.org
#

# import the plugin.py superclass
import os, sys
sys.path.append(os.path.join(os.path.dirname(__file__), '../'))
from plugin import Plugin

import datetime as d

class PACS_Push(Plugin):
  '''
  '''
  Plugin.AUTHORS = 'FNNDSC (dev@babyMRI.org)'
  Plugin.TITLE = 'PACS_push'
  Plugin.CATEGORY = 'PACS'
  Plugin.DESCRIPTION = 'Push data to a DICOM listener.'
  Plugin.DOCUMENTATION = 'http://wiki'
  Plugin.LICENSE = 'Opensource (MIT)'
  Plugin.VERSION = '0.2'

  def run(self, options):
    current_dir = os.path.dirname(os.path.abspath(__file__))
    
    print Plugin.TITLE
    print Plugin.VERSION
    
    # create/format input directory to fit connectome_meta requierements
    input_dir = os.path.join(options.output, 'input')
    # create input directory
    if not os.path.exists(input_dir):
      os.makedirs(input_dir)
      
    # get dcm images
    dcm_files = [e for e in os.listdir(options.DIR) if not os.path.isdir(e)]
    # check incoming dti directory
    if not len(dcm_files) > 0:
      print options.DIR + ' doesn\'t contain any files' 
      sys.exit(0)
      
    for dcm_file in dcm_files:
      os.symlink(os.path.join(options.DIR, dcm_file), os.path.join(input_dir, dcm_file))

    # process!!
    print '======================================='
    print  d.datetime.now().strftime("%Y-%m-%d %H:%M:%S") + ' ---> Start pushing...'
    command = ' \'/chb/arch/scripts/dicom_dirSend.bash -v 10';
    if options.ANONYM:
      command += ' -A'
    command += ' -h ' + options.HOST;
    command += ' -p ' + options.PORT;
    if not options.EXT == "*":
      command += ' -E ' + options.EXT;
    command += ' -a ' + options.AETITLE;
    command += ' ' + input_dir;
    command = current_dir + '/dicom_dirSend.bash.wrapper ' + command + '\''
    print 'command:'
    print command
    os.system(command)
    output = os.system(command)
    print output
    print  d.datetime.now().strftime("%Y-%m-%d %H:%M:%S") + ' ---> Finish pushing...'
        
# ENTRYPOINT
if __name__ == "__main__":
  plugin = PACS_Push()
  plugin.add_parameter('Input', Plugin.IMAGE, '--directory', action='store', dest='DIR', help='Directory to be pushed')
  plugin.add_parameter('Advanced', Plugin.STRING, '--host', action='store', default='pretoria.tch.harvard.edu', dest='HOST', help='Target Host')
  plugin.add_parameter('Advanced', Plugin.STRING, '--port', action='store', default='10502', dest='PORT', help='Target Port')
  plugin.add_parameter('Advanced', Plugin.STRING, '--extension', action='store', default='dcm', dest='EXT', help='Extension of files to be pushed')
  plugin.add_parameter('Advanced', Plugin.STRING, '--aetitle', action='store', default='CHRIS2', dest='AETITLE', help='Calling AETitle')
  plugin.add_parameter('Advanced', Plugin.BOOLEAN, '--anonymize', default=False, action='store_true', dest='ANONYM', help='Anonymize the dataset')
  plugin.launch(sys.argv)
