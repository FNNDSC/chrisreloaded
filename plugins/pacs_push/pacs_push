#!/usr/bin/env python
#
# PACS push plugin for ChRIS reloaded
#
#                                            _     
#                                           | |    
# ____  _____  ____  ___    ____  _   _  ___| |__  
#|  _ \(____ |/ ___)/___)  |  _ \| | | |/___)  _ \ 
#| |_| / ___ ( (___|___ |  | |_| | |_| |___ | | | |
#|  __/\_____|\____|___/   |  __/|____/(___/|_| |_|
#|_|                       |_|                     
#
# (c) 2012 Fetal-Neonatal Neuroimaging & Developmental Science Center
#                   Boston Children's Hospital
#
#              http://childrenshospital.org/FNNDSC/
#                        dev@babyMRI.org
#

# import the plugin.py superclass
import os, sys
sys.path.append(os.path.join(os.path.dirname(__file__), '../'))
sys.path.append(os.path.join(os.path.dirname(__file__), '../../lib'))
from plugin import Plugin

from  _common import crun
from  _common import systemMisc as misc 
import datetime as d

class PACS_Push(Plugin):
  '''
  '''
  Plugin.AUTHORS = 'FNNDSC (dev@babyMRI.org)'
  Plugin.TITLE = 'PACS_push'
  Plugin.CATEGORY = 'PACS'
  Plugin.DESCRIPTION = 'Push data to a DICOM listener.'
  Plugin.DOCUMENTATION = 'http://wiki'
  Plugin.LICENSE = 'Opensource (MIT)'
  Plugin.VERSION = '0.3'
  
  def push(self, options, current_dir, root, name, suffix):
    print '======================================='
    print  d.datetime.now().strftime("%Y-%m-%d %H:%M:%S") + ' ---> Start pushing...'

    target = os.path.join(root, name)
    
    command = ' \''+os.environ['ENV_DICOMDIRSEND_SCRIPT']+' -v 10';

    #special case for the top level directory anonymization
    print name 
    if name == '':
      name = os.path.basename(options.DIR)
 
    print name

    if options.ANONYM:
      command += ' -A -k -O ' + options.output + '/' + name + '-' + d.datetime.now().strftime("%Y%m%d%H%M%S%f") + '-anon'
    elif options.PANONYM:
      command += ' -P -k -O ' + options.output + '/' + name + '-' + d.datetime.now().strftime("%Y%m%d%H%M%S%f") + '-anon'

    command += ' -h ' + options.HOST;
    command += ' -p ' + options.PORT;

    if not options.EXT == "*":
      command += ' -E ' + options.EXT;

    command += ' -a ' + options.AETITLE;

    if not suffix == "":
      command += ' -c ' + suffix;
    command += ' ' + target;
    command = current_dir + '/dicom_dirSend.bash.wrapper ' + command + '\''

    # Use the crun shell mechanism
    shell = crun.crun()
    shell.echo(False)
    shell.echoStdOut(True)
    shell.echoStdErr(True)
    shell.detach(False)
    shell.waitForChild(True)

    shell(command)

    chrisRunDir   = os.environ['ENV_CHRISRUN_DIR']
    str_exitCode  = str(shell.exitCode())
    misc.file_writeOnce(os.path.join(chrisRunDir, 'command.log'), command)
    misc.file_writeOnce(os.path.join(chrisRunDir, 'exitCode.log'), str_exitCode)
    if str_exitCode != "0":
      misc.file_writeOnce(os.path.join(chrisRunDir, 'ERROR.err'), 'Plugin returned error!')

    # If partial anon, write a mail file containing MRN and anon val
    if options.PANONYM:
      chrisStd = os.path.join(chrisRunDir, 'chris.std')
      if os.path.isfile(chrisStd):
        str_MRN2anon = "cat %s | sed '/^\s*$/d' | sort | uniq -c | sort -n | tail -n 1" % chrisStd
        shell(str_MRN2anon)
        misc.file_writeOnce(os.path.join(chrisRunDir, 'chris.mail'), shell.stdout().strip())

    # output = os.system(command)
    # print output
    print  d.datetime.now().strftime("%Y-%m-%d %H:%M:%S") + ' ---> Finish pushing...'

  def run(self, options):
    current_dir = os.path.dirname(os.path.abspath(__file__))
    
    print Plugin.TITLE
    print Plugin.VERSION
    
    # we expect directory as input
    options.DIR = self.validate('directory', options.DIR);

    # create link to input directory
    if not os.path.islink(os.path.join(options.output, os.path.basename(options.DIR))):
      os.symlink(options.DIR, os.path.join(options.output, os.path.basename(options.DIR)))
  
    suffix = '' 

    # push subdirectories 
    # Follow links required since most of chris data from feeds is linked to data/MRN/STUDY/SERIES/
    for root, dirs, files in os.walk(options.DIR, topdown=False, followlinks=True):
      for i, name in enumerate(dirs):
        # we want the last push to create a new feeds for the pushed user id
        if(i == len(dirs) - 1):
          suffix = options.CAETITLE;

        # process!!
        self.push(options, current_dir, root, name, suffix)

    if( suffix == ''):
      suffix = options.CAETITLE

    # push current directory
    self.push(options, current_dir, options.DIR, '', suffix)
        
# ENTRYPOINT
if __name__ == "__main__":
  plugin = PACS_Push()
  plugin.add_parameter('Input', Plugin.IMAGE, '--directory', action='store', dest='DIR', help='Directory to be pushed')
  plugin.add_parameter('Advanced', Plugin.STRING, '--host', action='store', default='pretoria.tch.harvard.edu', dest='HOST', help='Target Host')
  plugin.add_parameter('Advanced', Plugin.STRING, '--port', action='store', default='10502', dest='PORT', help='Target Port')
  plugin.add_parameter('Advanced', Plugin.STRING, '--extension', action='store', default='*', dest='EXT', help='Extension of files to be pushed')
  plugin.add_parameter('Advanced', Plugin.STRING, '--aetitle', action='store', default='CHRIS2', dest='AETITLE', help='Called AETitle')
  plugin.add_parameter('Advanced', Plugin.STRING, '--caetitle', action='store', default='emaillink', dest='CAETITLE', help='Calling AETitle')
  plugin.add_parameter('Advanced', Plugin.BOOLEAN, '--panonymize', default=False, action='store_true', dest='PANONYM', help='Partially anonymize the dataset')
  plugin.add_parameter('Advanced', Plugin.BOOLEAN, '--anonymize', default=False, action='store_true', dest='ANONYM', help='Anonymize the dataset')
  plugin.launch(sys.argv)
