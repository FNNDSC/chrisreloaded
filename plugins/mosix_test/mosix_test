#!/usr/bin/env python
#
#                      _       _            _   
#                     (_)     | |          | |  
#  _ __ ___   ___  ___ ___  __| |_ ___  ___| |_ 
# | '_ ` _ \ / _ \/ __| \ \/ /| __/ _ \/ __| __|
# | | | | | | (_) \__ \ |>  < | ||  __/\__ \ |_ 
# |_| |_| |_|\___/|___/_/_/\_\ \__\___||___/\__|
#                          ______               
#                         |______|              
#
# (c) 2012 Fetal-Neonatal Neuroimaging & Developmental Science Center
#                   Boston Children's Hospital
#
#              http://childrenshospital.org/FNNDSC/
#                        dev@babyMRI.org
#

# import the plugin.py superclass
import os, sys, stat
import tempfile, shutil, subprocess

sys.path.append( os.path.join(os.path.dirname(__file__), '../') )
from plugin import Plugin

class MosixTest(Plugin):
    '''
    '''
    Plugin.AUTHORS          = 'FNNDSC (dev@babyMRI.org)'
    Plugin.TITLE            = 'mosix_test'
    Plugin.CATEGORY         = 'System'
    Plugin.DESCRIPTION      = 'Spawn multiple mosix load tests'
    Plugin.DOCUMENTATION    = 'http://wiki'
    Plugin.LICENSE          = 'Opensource (MIT)'
    Plugin.VERSION          = '0.1'

    def run(self):

        current_dir = os.path.dirname(os.path.abspath(__file__))
        options = self.options
        # Write a custom script to filesystem and execute...
        tmpdir      = tempfile.mkdtemp('mosix', 'test', os.environ['ENV_CLUSTER_TMP_DIR'])
        testshell   = '%s/test.sh' % tmpdir
        f           = open(testshell, 'w')
        instances   = options.instances
        scheduler   = options.scheduler
        loadTest    = options.loadTest

        runKey      = options.runKey
        if runKey != 'fnndsc': 
            b_canTest   = False
            print('Invalid runKey supplied! Test aborted...')
        else:
            b_canTest = True
            print('runKey OK -- test continuing...')

        script      = '''#!/bin/bash

for i in $(seq 1 %s) ; do 
    %s %s &
done
      ''' % (instances, scheduler, loadTest)

        f.write(script)
        f.close()
        st = os.stat(testshell)
        os.chmod(testshell, st.st_mode | 0115)
        cmd = 'cd %s ; %s' % (tmpdir, testshell)
        print cmd
        if b_canTest: os.system(cmd)

        if not options.debug:
            shutil.rmtree(tmpdir)


# ENTRYPOINT
if __name__ == "__main__":
    plugin = MosixTest()
    plugin.add_parameter( 'Input', Plugin.STRING, '--instances',  action='store', dest='instances', help='Load intances' )
    plugin.add_parameter( 'Input', Plugin.STRING, '--scheduler',  action='store', dest='scheduler', help='Scheduler command to use', default="/bin/mosrun -b -q" )
    plugin.add_parameter( 'Input', Plugin.STRING, '--loadTest',   action='store', dest='loadTest',  help='Load command to use', default="/bin/mostestload -t 10" )

    plugin.add_parameter('General (Advanced)', Plugin.BOOLEAN, '--debug',  default=False, action='store_true', dest='debug', help='If TRUE, do not remove tmp directory.')
    plugin.add_parameter('General (Advanced)', Plugin.STRING,  '--runKey', action='store', dest='runKey', help='Execution key (needed to run test)')


    # plugin.status = 100 # no cluster job monitoring to mark a feed instantly as done
    plugin.launch()
