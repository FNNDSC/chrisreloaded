#!/usr/bin/env python
#
#                      _       _            _   
#                     (_)     | |          | |  
#  _ __ ___   ___  ___ ___  __| |_ ___  ___| |_ 
# | '_ ` _ \ / _ \/ __| \ \/ /| __/ _ \/ __| __|
# | | | | | | (_) \__ \ |>  < | ||  __/\__ \ |_ 
# |_| |_| |_|\___/|___/_/_/\_\ \__\___||___/\__|
#                          ______               
#                         |______|              
#
# (c) 2012 Fetal-Neonatal Neuroimaging & Developmental Science Center
#                   Boston Children's Hospital
#
#              http://childrenshospital.org/FNNDSC/
#                        dev@babyMRI.org
#

# import the plugin.py superclass
import os, sys, stat
import tempfile, shutil, subprocess

sys.path.append( os.path.join(os.path.dirname(__file__), '../') )
from plugin import Plugin

class file_browser( Plugin ):
  '''
  '''
  Plugin.AUTHORS = 'FNNDSC (dev@babyMRI.org)'
  Plugin.TITLE = 'mosix_test'
  Plugin.CATEGORY = 'System'
  Plugin.DESCRIPTION = 'Spawn multiple mosix load tests'
  Plugin.DOCUMENTATION = 'http://wiki'
  Plugin.LICENSE = 'Opensource (MIT)'
  Plugin.VERSION = '0.1'

  def run( self, options ):

    current_dir = os.path.dirname(os.path.abspath(__file__))

    # Write a custom script to filesystem and execute...
    tmpdir 		= tempfile.mkdtemp('mosix', 'test', os.environ['ENV_CLUSTER_TMP_DIR'])
    testshell 	= '%s/test.sh' % tmpdir
    f 			= open(testshell, 'w')
    timeout 	= options.timeout
    instances 	= options.instances

    script 		= '''#!/bin/bash

for i in $(seq 1 %s) ; do 
	/bin/mosbatch -b -q /bin/mostestload -t %s &
done
    ''' % (instances, timeout)

    f.write(script)
    f.close()
    st = os.stat(testshell)
    os.chmod(testshell, st.st_mode | 0115)
    cmd = 'cd %s ; %s' % (tmpdir, testshell)
    print cmd
    os.system(cmd)


# ENTRYPOINT
if __name__ == "__main__":
  plugin = file_browser()
  plugin.add_parameter( 'Input', Plugin.STRING, '--timeout', action='store', dest='timeout', help='Load timeout (seconds)' )
  plugin.add_parameter( 'Input', Plugin.STRING, '--instances', action='store', dest='instances', help='Load intances' )
  plugin.status = 100 # no cluster job monitoring to mark a feed instantly as done
  plugin.launch( sys.argv )
