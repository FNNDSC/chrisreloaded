#!/usr/bin/env python
#
#      _       
#     (_)      
#  _____ _ __  
# |_  / | '_ \ 
#  / /| | |_) |
# /___|_| .__/ 
#       | |    
#       |_|    
#
# (c) 2014 Fetal-Neonatal Neuroimaging & Developmental Science Center
#                   Boston Children's Hospital
#
#              http://childrenshospital.org/FNNDSC/
#                        dev@babyMRI.org
#

# import the plugin.py superclass
import os, sys, stat
import tempfile, shutil, subprocess

sys.path.append(os.path.join(os.path.dirname(__file__), '../'))
sys.path.append(os.path.join(os.path.dirname(__file__), '../../lib'))
from  _common import crun
from  _common import systemMisc as misc 

sys.path.append( os.path.join(os.path.dirname(__file__), '../') )
from plugin import Plugin

class Zip(Plugin):
    '''
    '''
    Plugin.AUTHORS          = 'FNNDSC (dev@babyMRI.org)'
    Plugin.TITLE            = 'zip'
    Plugin.CATEGORY         = 'System'
    Plugin.DESCRIPTION      = 'zip (or unzip) data directory (or file)'
    Plugin.DOCUMENTATION    = 'http://wiki'
    Plugin.LICENSE          = 'Opensource (MIT)'
    Plugin.VERSION          = '0.1'

    def run(self):

        current_dir = os.path.dirname(os.path.abspath(__file__))
        options = self.options
        tmpdir      = tempfile.mkdtemp('zip', 'chris', os.environ['ENV_CLUSTER_TMP_DIR'])

        if not options.unzip:
            zipname     = os.path.basename(options.input)
            zipnamezip  = '%s.zip' % zipname
            destdir     = '%s/%s' % (tmpdir, zipname)
            print('Copying tree from ' + options.input + ' to ' + destdir)
            shutil.copytree (options.input, destdir)
            cmd         = 'cd ' + tmpdir + '; zip -r %s.zip %s' % (zipname, zipname)
            print(cmd)
            os.system(cmd)
            print('Copying %s to %s\n' % (zipnamezip, os.path.join(options.output, zipnamezip)))
            shutil.copyfile(os.path.join(tmpdir, zipnamezip), os.path.join(options.output, zipnamezip))
        else:
            # Use the crun shell mechanism
            shell = crun.crun()
            shell.echo(True)
            shell.echoStdOut(True)
            shell.echoStdErr(True)
            shell.detach(False)
            shell.waitForChild(True)
            zipnamezip  = os.path.basename(options.input)
            zipname     = os.path.splitext(zipnamezip)[0]
            unpackroot  = '%s/%s' % (tmpdir, zipname)
            print('Copying zip from ' + options.input + ' to  ' + tmpdir)
            shutil.copyfile(options.input, os.path.join(tmpdir, zipnamezip))
            shell('mkdir -p %s' % (unpackroot))
            shell('cd %s ; unzip ../%s' % (unpackroot, zipnamezip))
            print('Copying unpacked tree from %s to %s' % (os.path.join(unpackroot, zipname), os.path.join(options.output, zipname)))
            shutil.copytree(os.path.join(unpackroot, zipname), os.path.join(options.output, zipname))

        shutil.rmtree(tmpdir)


# ENTRYPOINT
if __name__ == "__main__":
    plugin = Zip()
    plugin.add_parameter( 'Input', Plugin.IMAGE, '--input', action='store', dest='input', help='the directory to zip' )
    plugin.add_parameter('Zip or Unzip', Plugin.BOOLEAN, '--unzip', default=False, action='store_true', dest='unzip', help='unzip archive')


    # plugin.status = 100 # no cluster job monitoring to mark a feed instantly as done
    plugin.launch()
