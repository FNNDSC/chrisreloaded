#!/usr/bin/env python
#                                 _                       
#  ___ ___  _ __  _ __   ___  ___| |_ ___  _ __ ___   ___ 
# / __/ _ \| '_ \| '_ \ / _ \/ __| __/ _ \| '_ ` _ \ / _ \
#| (_| (_) | | | | | | |  __/ (__| || (_) | | | | | |  __/
# \___\___/|_| |_|_| |_|\___|\___|\__\___/|_| |_| |_|\___|
#                                                         
# (c) 2012 Fetal-Neonatal Neuroimaging & Developmental Science Center
#                   Boston Children's Hospital
#
#              http://childrenshospital.org/FNNDSC/
#                        dev@babyMRI.org
#

# import the plugin.py superclass
import os, sys
sys.path.append(os.path.join(os.path.dirname(__file__), '../'))
from plugin import Plugin

class connectome(Plugin):
  '''
  '''
  Plugin.AUTHORS = 'FNNDSC (dev@babyMRI.org)'
  Plugin.TITLE = 'Connectome'
  Plugin.CATEGORY = 'Diffusion'
  Plugin.DESCRIPTION = 'Run the connectome pipeline'
  Plugin.DOCUMENTATION = 'http://wiki'
  Plugin.LICENSE = 'Opensource (MIT)'
  Plugin.VERSION = '0.1'

  def run(self, options):

    current_dir = os.path.dirname(os.path.abspath(__file__))
    
    #base command
    command = ' \'/chb/arch/scripts/connectome_meta.bash -v 10 -f';
    

        
    # grab the first dti dicom input file
    firstDTIDicomFile = os.listdir(options.dti)[0]
    # dti dicom file
    command += ' -D ' + options.dti
    command += ' -d ' + os.path.join(options.dti, firstDTIDicomFile)
    
    # grab the first t1 dicom input file
    firstT1DicomFile = os.listdir(options.t1)[0]
    # t1 dicom file
    command += ' -1 ' + os.path.join(options.t1, firstT1DicomFile)
    
    #output
    command += ' -O ' + options.output
    
    #log dir
    command += ' -L ' + options.output
    
    #all freesurfer args
    command += ' -F '
    
    #stages
    # 1-> get the data
    # 2-> tractogphy
    # 3-> connectome
    command += ' -t 23'
    
    # tailarach
    if options.tailarach:
      command += ''
    else:
      command += ' -notailarach '
    
    # stages
    command += ' --tract-meta-stages ';
    if options.stage1:
      command += '1'
    if options.stage2:
      command += '2'
    if options.stage3:
      command += '3'
    if options.stage4:
      command += '4'
    if options.stage5:
      command += '5'
    
    #mask1
    command += ' --m1 ' + options.m1 + ' --m1-lower-threshold ' + options.m1lowerthreshold + ' --m1-upper-threshold ' + options.m1upperthreshold
    
    #mask2
    if options.usem2:
      command += ' --m2 ' + options.m2 + ' --m2-lower-threshold ' + options.m2lowerthreshold + ' --m2-upper-threshold ' + options.m2upperthreshold
        
    #angle threshold
    command += ' --angle-threshold ' + options.anglethreshold
    
    #recon algo
    if options.recalgo ==  '2nd_Order_Runga_Hutta':
      command += ' -A rk2'
    elif options.recalgo == 'Interpolated_Streamline':
      command += ' -A sl'
    elif options.recalgo == 'Tensorline':
      command += ' -A tl'

    #image model
    if options.immodel ==  'HARDY':
      command += ' -I hardy'
    
    #gradient image
    if options.usegradient:
      command += ' -g ' + options.gradient
      
    #b0 value
    if options.useb0:
      command += ' -B ' + options.b0
    
    #invert gradients
    if options.invertx:
      command += ' -X'
    if options.inverty:
      command += ' -Y'
    if options.invertz:
      command += ' -Z'
     
    command = current_dir + '/connectome.wrapper ' + command + '\''
    print command
    os.system(command)

# ENTRYPOINT
if __name__ == "__main__":
  plugin = connectome()
  #inputs
  plugin.add_parameter('Input', Plugin.IMAGE, '--dti', action='store', dest='dti', help='the DTI scan')
  plugin.add_parameter('Input', Plugin.IMAGE, '--t1', action='store', dest='t1', help='the T1 scan')
  
  #general
  plugin.add_parameter('General', Plugin.BOOLEAN, '--tailarach', default=True, action='store_true', dest='tailarach', help='Perform Tailarach')
  plugin.add_parameter('General', Plugin.INTEGER, '--anglethreshold', default='35', action='store', dest='anglethreshold', help='Angle threshold filtering')
  plugin.add_parameter('General', Plugin.COMBOBOX, '--recalgo', values=['FACT', '2nd_Order_Runga_Hutta', 'Interpolated_Streamline', 'Tensorline'], default='FACT', action='store', dest='recalgo', help='Reconstruction Algorithm')
  plugin.add_parameter('General', Plugin.COMBOBOX, '--immodel', values=['DTI', 'HARDY'], default='DTI', action='store', dest='immodel', help='Image Model')
  
  #stages to be run
  plugin.add_parameter('Stages (Advanced)', Plugin.BOOLEAN, '--stage1', default=True, action='store_true', dest='stage1', help='Run stage 1 (MRI Convert)')
  plugin.add_parameter('Stages (Advanced)', Plugin.BOOLEAN, '--stage2', default=True, action='store_true', dest='stage2', help='Run stage 2 (Eddy Correct)')
  plugin.add_parameter('Stages (Advanced)', Plugin.BOOLEAN, '--stage3', default=True, action='store_true', dest='stage3', help='Run stage 3 (DTI Recon)')
  plugin.add_parameter('Stages (Advanced)', Plugin.BOOLEAN, '--stage4', default=True, action='store_true', dest='stage4', help='Run stage 4 (ODF Recon)')
  plugin.add_parameter('Stages (Advanced)', Plugin.BOOLEAN, '--stage5', default=True, action='store_true', dest='stage5', help='Run stage 5 (Spline Filter)')
  
  #Mask Filter
  plugin.add_parameter('1st Mask Filter (Advanced)', Plugin.COMBOBOX, '--m1', values=['DWI', 'FA', 'ADC'], default='DWI', action='store', dest='m1', help='Volume to be used as 1st mask filter')
  plugin.add_parameter('1st Mask Filter (Advanced)', Plugin.DOUBLE, '--m1lowerthreshold', default='0', action='store', dest='m1lowerthreshold', help='Lower mask threshold')
  plugin.add_parameter('1st Mask Filter (Advanced)', Plugin.DOUBLE, '--m1upperthreshold', default='1', action='store', dest='m1upperthreshold', help='Upper mask threshold')
  
  #2nd Mask Filter
  plugin.add_parameter('2nd Mask Filter (Advanced)', Plugin.BOOLEAN, '--usem2', default=False, action='store_true', dest='usem2', help='Use 2nd mask filter')
  plugin.add_parameter('2nd Mask Filter (Advanced)', Plugin.COMBOBOX, '--m2', values=['DWI', 'FA', 'ADC'], default='FA', action='store', dest='m2', help='Volume to be used as 2nd mask filter')
  plugin.add_parameter('2nd Mask Filter (Advanced)', Plugin.DOUBLE, '--m2lowerthreshold', default='0', action='store', dest='m1lowerthreshold', help='Lower mask threshold')
  plugin.add_parameter('2nd Mask Filter (Advanced)', Plugin.DOUBLE, '--m2upperthreshold', default='1', action='store', dest='m1upperthreshold', help='Upper mask threshold')
  
  # gradients
  plugin.add_parameter('Gradient (Advanced)', Plugin.BOOLEAN, '--usegradient', default=False, action='store_true', dest='usegradient', help='Manually upload gradient')
  plugin.add_parameter('Gradient (Advanced)', Plugin.IMAGE, '--gradient', action='store', dest='gradient', help='Gradient file')
  plugin.add_parameter('Gradient (Advanced)', Plugin.BOOLEAN, '--useb0', default=False, action='store_true', dest='useb0', help='Manually specify number of B0 volumes')
  plugin.add_parameter('Gradient (Advanced)', Plugin.INTEGER, '--b0', default='1', action='store', dest='b0', help='Number of B0 volumes')
  plugin.add_parameter('Gradient (Advanced)', Plugin.BOOLEAN, '--invertx', default=False, action='store_true', dest='invertx', help='Invert X gradient')
  plugin.add_parameter('Gradient (Advanced)', Plugin.BOOLEAN, '--inverty', default=False, action='store_true', dest='inverty', help='Invert Y gradient')
  plugin.add_parameter('Gradient (Advanced)', Plugin.BOOLEAN, '--invertz', default=False, action='store_true', dest='invertz', help='Invert Z gradient')
  
  plugin.launch(sys.argv)
