#!/usr/bin/env python
#
#                                                            _
# FREESURFER MRI_DEFACE
#
# (c) 2014 Fetal-Neonatal Neuroimaging & Developmental Science Center
#                   Boston Children's Hospital
#
#              http://childrenshospital.org/FNNDSC/
#                        dev@babyMRI.org
#


# import the plugin.py superclass
import os, sys
sys.path.append(os.path.join(os.path.dirname(__file__), '../'))
from plugin import Plugin
# import the FsPlugin superclass for Freesurfer plugins
from fsplugin import FsPlugin
#import utilities
import itertools


class MRIDeface(FsPlugin):
    '''
    '''
    Plugin.AUTHORS = 'FNNDSC (dev@babyMRI.org)'
    Plugin.TITLE = 'Freesurfer MRI Deface'
    Plugin.CATEGORY = 'Freesurfer'
    Plugin.DESCRIPTION = 'Deface an MRI volume, i.e. remove the facial features to further de-identify the data'
    Plugin.DOCUMENTATION = 'http://wiki'
    Plugin.LICENSE = 'Opensource (MIT)'
    Plugin.VERSION = '0.1'

    def run(self, options):
        # create temp dir and migrate data
        self.copyDataToTempDir(options)
        #execute mri_deface on all MRI volumes within the input tree
        current_dir = os.path.dirname(os.path.abspath(__file__))
        cmds = []
        for inFile, outFileName in itertools.izip(self.inputFilePaths, self.outputFileNames):
          cmd = 'cd ' + options.output +';' + current_dir + '/mri_deface.wrapper ' + inFile + \
          ' \$FREESURFER_HOME/average/talairach_mixed_with_skull.gca \$FREESURFER_HOME/average/face.gca ' + \
          os.path.join(self.tempdir, outFileName) 
          cmds.append(cmd)
        userErrorStr = 'mri_deface could not deface file'
        self.execCmd(options, userErrorStr, cmds)
        # remove temp dir
        self.removeTempDir()


# ENTRYPOINT
if __name__ == "__main__":
    plugin = MRIDeface()
    plugin.add_parameter( 'Input', Plugin.IMAGE, '--input', action='store', dest='input', help='the image to convert' )
    plugin.add_parameter( 'Output', Plugin.STRING, '--format', action='store', dest='format', default='nii', help='the format to convert to (defined by extension)' )
    plugin.add_parameter( 'Advanced', Plugin.STRING, '--prefix', action='store', dest='prefix', default='defaced-', help='a prefix to add to the defaced volume name' )
    plugin.add_parameter( 'Advanced', Plugin.STRING, '--extensions', action='store', dest='extensions', default='nii,mgz,dcm,mgh', help='input extensions to parse (comma separated)' )
    plugin.launch( sys.argv )
