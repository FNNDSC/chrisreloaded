#!/usr/bin/env python
#
# PACS push plugin for ChRIS reloaded
#
#                                            _     
#                                           | |    
# ____  _____  ____  ___    ____  _   _  ___| |__  
#|  _ \(____ |/ ___)/___)  |  _ \| | | |/___)  _ \ 
#| |_| / ___ ( (___|___ |  | |_| | |_| |___ | | | |
#|  __/\_____|\____|___/   |  __/|____/(___/|_| |_|
#|_|                       |_|                     
#
# (c) 2012 Fetal-Neonatal Neuroimaging & Developmental Science Center
#                   Boston Children's Hospital
#
#              http://childrenshospital.org/FNNDSC/
#                        dev@babyMRI.org
#

# import the plugin.py superclass
import os, sys
sys.path.append(os.path.join(os.path.dirname(__file__), '../'))
sys.path.append(os.path.join(os.path.dirname(__file__), '../../lib'))
from plugin import Plugin

from  _common import crun
from  _common import systemMisc as misc 
import datetime as d

class PACS_Push(Plugin):
  '''
  '''
  Plugin.AUTHORS = 'FNNDSC (dev@babyMRI.org)'
  Plugin.TITLE = 'PACS_push'
  Plugin.CATEGORY = 'PACS'
  Plugin.DESCRIPTION = 'Push data to a DICOM listener.'
  Plugin.DOCUMENTATION = 'http://wiki'
  Plugin.LICENSE = 'Opensource (MIT)'
  Plugin.VERSION = '0.3'
  
  def push(self, options, current_dir, root, name, suffix):
    print '======================================='
    print  d.datetime.now().strftime("%Y-%m-%d %H:%M:%S") + ' ---> Start pushing...'

    target = os.path.join(root, name)
    
    command = ' \''+os.environ['ENV_DICOMDIRSEND_SCRIPT']+' -v 10';

    #special case for the top level directory anonymization
    print name 
    if name == '':
      name = os.path.basename(options.DIR)
 
    print name

    if options.ANONYM:
      command += ' -A -k -O ' + options.output + '/' + name + '-' + d.datetime.now().strftime("%Y%m%d%H%M%S%f") + '-anon'
    elif options.PANONYM:
      command += ' -P -k -O ' + options.output + '/' + name + '-' + d.datetime.now().strftime("%Y%m%d%H%M%S%f") + '-anon'

    command += ' -h ' + options.HOST;
    command += ' -p ' + options.PORT;

    if not options.EXT == "*":
      command += ' -E ' + options.EXT;

    command += ' -a ' + options.AETITLE;

    if not suffix == "":
      command += ' -c ' + suffix;
    command += ' ' + target;
    command = current_dir + '/dicom_dirSend.bash.wrapper ' + command + '\''

    # Use the crun shell mechanism
    shell = crun.crun()
    shell.echo(False)
    shell.echoStdOut(True)
    shell.echoStdErr(True)
    shell.detach(False)
    shell.waitForChild(True)

    shell(command)

    chrisRunDir   = os.environ['ENV_CHRISRUN_DIR']
    str_exitCode  = str(shell.exitCode())
    misc.file_writeOnce(os.path.join(chrisRunDir, 'command.log'), command)
    misc.file_writeOnce(os.path.join(chrisRunDir, 'exitCode.log'), str_exitCode)
    if str_exitCode != "0":
      misc.file_writeOnce(os.path.join(chrisRunDir, 'ERROR.err'), 'Plugin returned error!')


  def run(self, options):
    current_dir = os.path.dirname(os.path.abspath(__file__))

    print  d.datetime.now().strftime("%Y-%m-%d %H:%M:%S") + ' ---> Start pushing...'
    
    print Plugin.TITLE
    print Plugin.VERSION

    #####
    # 
    # MUST RUN AS CHRIS
    # CHRIS MUST HAVE ACCESS TO TARGET FILE
    #
    #####

    # we expect directory as input
    options.DIR = self.validate('directory', options.DIR);
    
    # is target valid?
    # call php wrapper1
    # test string and if valid, return address & source code.
    # getRemote -r

    # get path of tmp and plugin dirs on remote server
    # ssh( getRemote -f <remoteConfigFile> -p -t)

    # ZIP it!
    # ZIP plugin to current diri
    # crun cluster
    # ../zip/zip --input --output

    # 
    # SCP it to tmp!

    # MAIL it!
    # need username -> access email in db
    # email zip feed generator link
    # ssh(./emailUsr.php -u nicolas.rannou -z /neuro/users/chris/dev/users/rudolphpienaar/zip/4_11_2014_14_7_48-1732/0_2083985_log/2083985_log.zip)

    print  d.datetime.now().strftime("%Y-%m-%d %H:%M:%S") + ' ---> Finish pushing...'
        
# ENTRYPOINT
if __name__ == "__main__":
  plugin = PACS_Push()
  plugin.add_parameter('Parameters', Plugin.IMAGE, '--directory', action='store', dest='DIR', help='Directory to be pushed')
  plugin.add_parameter('Parameters', Plugin.STRING, '--remote', action='store', default='MGH', dest='REMOTE', help='Remote CHRIS instance')
  plugin.add_parameter('Parameters', Plugin.BOOLEAN, '--user', action='store', default="username", dest='USERNAME', help='Recipient')
  plugin.launch(sys.argv)
